name: App Pipeline

on:
  push:
    branches: ["main"]
    tags:
      - "*"
  pull_request:
    branches: ["main"]

env:
  AWS_REGION: us-east-1

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install
        run: cd api/ && npm ci

      - name: Lint and Test
        run: cd api/ && npm run lint && npm run test && npm run test:e2e

      - name: Build the Docker image
        run: cd api/ && docker build .  --tag api:$(date +%s)

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.0

      - name: Initialize and Plan Terraform
        run: cd terraform/environments/dev && terraform init && terraform plan -out "plan-dev.txt"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags/release-')

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.0

      - name: Apply Terraform
        run: cd terraform/${{ env.ENVIRONMENT }} && terraform init && terraform apply -auto-approve
