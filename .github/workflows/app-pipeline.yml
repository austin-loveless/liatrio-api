name: App Pipeline

on:
  push:
    branches: ["main"]
    tags:
      - "*"
  pull_request:
    branches: ["main"]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ecr-repo-liatrio
  EKS_CLUSTER: eks-cluster-liatrio
  IMAGE_TAG: latest

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install
        run: cd api/ && npm ci

      - name: Lint and Test
        run: cd api/ && npm run lint && npm run test && npm run test:e2e

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          cd api/
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.0

      # DEV
      - name: Initialize and Plan Terraform for Dev
        if: github.ref == 'refs/heads/main'
        run: cd terraform/environments/dev && terraform init && terraform apply -auto-approve

      # - name: Deploy to EKS
      #   if: github.ref == 'refs/heads/main'
      #   run: |
      #     curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
      #     chmod 700 get_helm.sh
      #     ./get_helm.sh
      #     aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name "${{ env.EKS_CLUSTER }}-develop"
      #     cd charts/
      #     helm upgrade api . -f values-dev.yaml

      # PROD
      - name: Apply Terraform to Prod
        if: startsWith(github.event.ref, 'refs/tags/release-')
        run: cd terraform/environments/prod && terraform init && terraform apply -auto-approve

      - name: Deploy to EKS
        if: startsWith(github.event.ref, 'refs/tags/release-')
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name "${{ env.EKS_CLUSTER }}-prod"
          cd charts/
          helm install api . -f values-prod.yaml
